Functional Requirements
    • Display a list of books with title, author, and genre.
    • Provide a search bar to filter books by title or author.
    • Provide a dropdown menu to filter books by genre.
    • Dynamically update the displayed book list based on search and filter criteria.
Non-Functional Requirements
    • The webpage should load quickly and function smoothly.
    • The design should be responsive to ensure usability on different screen sizes.


Model and operations description
Entities:
1. Book
   - id (integer, unique identifier)
   - title (string, book title)
   - author (string, author name)
   - year (integer, publication year)
   - links (array of HATEOAS links)

Authentication:
- The API uses JWT (JSON Web Token) for authentication.
- Clients must include a valid JWT token in the `Authorization` header for protected endpoints.
- Example: `Authorization: Bearer <token>`
- JWT Structure:
  {
    "alg": "HS256",
    "typ": "JWT"
  }
  {
    "sub": "userId",
    "role": "admin",
    "exp": 1715000000
  }

Endpoints:

1. Get all books (paginated):
   GET /api/v1/books?page={page}&size={size}
   Headers: 
   - Authorization: Bearer <token>
   - Cache-Control: public, max-age=300
   - If-None-Match: <etag>  # If client has cached ETag
   Response: 
   - 200 OK:
     Cache-Control: public, max-age=300
     ETag: "abc123"
     Content-Type: application/json
     [{
        "id": 1, "title": "1984", "author": "George Orwell", "year": 1949,
        "links": [
           {"rel": "self", "href": "/api/v1/books/1"},
           {"rel": "update", "href": "/api/v1/books/1"},
           {"rel": "delete", "href": "/api/v1/books/1"}
        ]
     }, ...]
   - 304 Not Modified (if cached ETag matches)
   - 401 Unauthorized

2. Get a book by ID:
   GET /api/v1/books/{bookId}
   Headers: 
   - Authorization: Bearer <token>
   - Cache-Control: public, max-age=300
   - If-None-Match: <etag>  # If client has cached ETag
   Response: 
   - 200 OK:
     Cache-Control: public, max-age=300
     ETag: "abc123"
     Last-Modified: Mon, 19 Feb 2025 12:00:00 GMT
     Content-Type: application/json
     {
        "id": 1, "title": "1984", "author": "George Orwell", "year": 1949,
        "links": [
           {"rel": "self", "href": "/api/v1/books/1"},
           {"rel": "update", "href": "/api/v1/books/1"},
           {"rel": "delete", "href": "/api/v1/books/1"}
        ]
     }
   - 304 Not Modified (if cached ETag matches)
   - 404 Not Found
   - 401 Unauthorized

3. Get books by author (paginated):
   GET /api/v1/books?author={authorName}&page={page}&size={size}
   Headers:
   - Authorization: Bearer <token>
   - Cache-Control: public, max-age=300
   - If-None-Match: <etag>  # If client has cached ETag
   Response:
   - 200 OK:
     Cache-Control: public, max-age=300
     ETag: "def456"
     Content-Type: application/json
     [{
        "id": 2, "title": "Animal Farm", "author": "George Orwell", "year": 1945, "links": [
           {"rel": "self", "href": "/api/v1/books/2"},
           {"rel": "update", "href": "/api/v1/books/2"},
           {"rel": "delete", "href": "/api/v1/books/2"}
        ]
     }, ...]
   - 304 Not Modified (if cached ETag matches)
   - 401 Unauthorized

4. Add a new book:
   POST /api/v1/books
   Headers:
   - Authorization: Bearer <token>
   - Content-Type: application/json
   Request Body:
   {"title": "New Book", "author": "Author Name", "year": 2024}
   Response:
   - 201 Created:
     Cache-Control: no-store
     Content-Type: application/json
     {
        "id": 3, "title": "New Book", "author": "Author Name", "year": 2024,
        "links": [
           {"rel": "self", "href": "/api/v1/books/3"},
           {"rel": "update", "href": "/api/v1/books/3"},
           {"rel": "delete", "href": "/api/v1/books/3"}
        ]
     }
   - 400 Bad Request
   - 401 Unauthorized

5. Update an existing book:
   PUT /api/v1/books/{bookId}
   Headers:
   - Authorization: Bearer <token>
   - Content-Type: application/json
   Request Body:
   {"title": "Updated Title", "author": "Updated Author", "year": 2025}
   Response:
   - 200 OK:
     Cache-Control: no-store
     Content-Type: application/json
     {
        "id": 1, "title": "Updated Title", "author": "Updated Author", "year": 2025,
        "links": [
           {"rel": "self", "href": "/api/v1/books/1"},
           {"rel": "update", "href": "/api/v1/books/1"},
           {"rel": "delete", "href": "/api/v1/books/1"}
        ]
     }
   - 400 Bad Request
   - 401 Unauthorized
   - 404 Not Found

6. Delete a book:
   DELETE /api/v1/books/{bookId}
   Headers:
   - Authorization: Bearer <token>
   Response:
   - 200 OK: {"message": "Book deleted"}
   - 401 Unauthorized
   - 404 Not Found

Error Handling:
- 400 Bad Request: Invalid input or missing required fields.
- 401 Unauthorized: Missing or invalid JWT token.
- 403 Forbidden: User lacks necessary permissions.
- 404 Not Found: Resource does not exist.
- 500 Internal Server Error: Unexpected server failure.

Caching Notes:
- **GET requests** are cached with a maximum age of 5 minutes (`max-age=300`).
- **POST, PUT, DELETE requests** have `Cache-Control: no-store` to prevent caching, as they modify data.
- **ETag** and **Last-Modified** headers are used to optimize cache validation for **GET requests**.
